{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/ServiceAdd.js","components/ServiceList.js","components/ServiceAddClassBased.js","components/ServiceListClassBased.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","index.js"],"names":["ADD_SERVICE","EDIT_SERVICE","REMOVE_SERVICE","CHANGE_SERVICE_FIELD","CLEAR_SERVICE_FIELDS","SET_ERROR","addService","id","name","price","type","payload","editService","removeService","changeServiceField","value","clearServiceFields","setError","error","ServiceAdd","useSelector","state","serviceAdd","isEdit","dispatch","useDispatch","handleChange","evt","target","onSubmit","preventDefault","isNaN","Number","onReset","onChange","className","ServiceList","items","serviceList","map","key","onClick","handleEdit","handleRemove","ServiceAddClassBased","props","handleSubmit","item","onSave","handleReset","this","Component","connect","ServiceListClassBased","onEdit","onDelete","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","filter","service","String","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d226d3e8.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const CLEAR_SERVICE_FIELDS = 'CLEAR_SERVICE_FIELDS';\nexport const SET_ERROR = 'SET_ERROR';\n","import { ADD_SERVICE, EDIT_SERVICE, REMOVE_SERVICE, CHANGE_SERVICE_FIELD, CLEAR_SERVICE_FIELDS, SET_ERROR } from './actionTypes';\n\nexport function addService(id, name, price) {\n  return { type: ADD_SERVICE, payload: { id, name, price } };\n}\n\nexport function editService(id, name, price) {\n  return { type: EDIT_SERVICE, payload: { id, name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function clearServiceFields() {\n  return { type: CLEAR_SERVICE_FIELDS };\n}\n\nexport function setError(error) {\n  return { type: SET_ERROR, payload: { error } };\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeServiceField, addService, clearServiceFields, setError } from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n\tconst {id, name, price, error, isEdit} = useSelector(state => state.serviceAdd);\n\tconst dispatch = useDispatch();\n\n\tconst handleChange = evt => {\n\t\tconst { name, value } = evt.target;\n\t\tdispatch(changeServiceField(name, value));\n\t}\n\n\tconst handleSubmit = evt => {\n\t\tevt.preventDefault();\n\t\tif (name && price && !isNaN(Number(price))) {\n\t\t\tdispatch(addService(id, name, price));\n\t\t\tdispatch(clearServiceFields());\n\t\t} else {\n\t\t\tdispatch(setError('Введите корректные данные'));\n\t\t}\n\t}\n\n\tconst handleReset = () => {\n\t\tdispatch(clearServiceFields());\t\t\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} onReset={handleReset}>\n\t\t\t<input name=\"name\" onChange={handleChange} value={name} />\n\t\t\t<input name=\"price\" onChange={handleChange} value={price} />\n\t\t\t<button type=\"submit\">Save</button>\n\t\t\t{isEdit && <button type=\"reset\">Cancel</button>}\n\t\t\t{error && <p className=\"App-error\">{error}</p>}\n\t\t</form>\n\t);\n}\n\nexport default ServiceAdd;\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editService, removeService, clearServiceFields, setError } from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const items = useSelector(state => state.serviceList);\n  const isEdit = useSelector(state => state.serviceAdd.isEdit);\n  const dispatch = useDispatch();\n\n  const handleEdit = (id, name, price) => {\n    if (isEdit) {\n      dispatch(setError('Завершите редактирование текущей записи'));\n    } else {\n      dispatch(editService(id, name, price));\n    }\n  }\n\n  const handleRemove = id => {\n    if (isEdit) {\n      dispatch(setError('Завершите редактирование текущей записи'));\n    } else {\n      dispatch(removeService(id));\n      dispatch(clearServiceFields());\n    }\n  }\n\n  return (\n    <ul>\n      {items.map(({ id, name, price }) => (\n        <li key={id}>\n          {name} {price}\n          <button onClick={() => handleEdit(id, name, price)}>&#x270E;</button>  \n          <button onClick={() => handleRemove(id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default ServiceList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeServiceField, addService, clearServiceFields, setError } from '../actions/actionCreators';\n\nclass ServiceAddClassBased extends Component {\n  handleChange = evt => {\n    const { name, value } = evt.target;\n    this.props.onChange(name, value);\n  }\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    const { id, name, price } = this.props.item;\n\t\tif (name && price && !isNaN(Number(price))) {\n      this.props.onSave(id, name, price);\n      this.props.onReset();\n\t\t} else {\n\t\t\tthis.props.setError('Введите корректные данные');\n\t\t}\n  }\n\n\thandleReset = () => {\n    this.props.onReset();\n\t}\n\n  render() {\n    const { name, price, error, isEdit } = this.props.item;\n\n    return (\n      <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n        <input name='name' onChange={this.handleChange} value={name} />\n        <input name='price' onChange={this.handleChange} value={price} />\n        <button type='submit'>Save</button>\n        {isEdit && <button type=\"reset\">Cancel</button>}\n\t\t  \t{error && <p className=\"App-error\">{error}</p>}\n      </form>\n    );\n  }\n}\n\nServiceAddClassBased.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    price: PropTypes.string,\n    error: PropTypes.string,\n    isEdit: PropTypes.bool,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n  item: state.serviceAdd,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange: (name, value) => dispatch(changeServiceField(name, value)),\n    onSave: (id, name, price) => dispatch(addService(id, name, price)),\n    onReset: () => dispatch(clearServiceFields()),\n    setError: (error) => dispatch(setError(error))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceAddClassBased);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { editService, removeService, clearServiceFields, setError } from '../actions/actionCreators';\nimport { connect } from 'react-redux';\n\nclass ServiceListClassBased extends Component {\n  handleEdit = (id, name, price) => {\n    if (this.props.isEdit) {\n      this.props.setError('Завершите редактирование текущей записи');\n    } else {\n      this.props.onEdit(id, name, price);\n    }\n  }\n \n  handleRemove = id => {\n    if (this.props.isEdit) {\n      this.props.setError('Завершите редактирование текущей записи');\n    } else {\n      this.props.onDelete(id);\n      this.props.onReset();\n    }\n  }\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <ul>\n        {items.map(({ id, name, price }) => (\n          <li key={id}>\n            {name} {price}\n            <button onClick={() => this.handleEdit(id, name, price)}>&#x270E;</button>  \n            <button onClick={() => this.handleRemove(id)}>✕</button>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nServiceListClassBased.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    price: PropTypes.number,\n  })).isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired   \n}\n\nconst mapStateToProps = (state) => ({\n  items: state.serviceList,\n  isEdit: state.serviceAdd.isEdit\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onEdit: (id, name, price) => dispatch(editService(id, name, price)),\n    onDelete: id => dispatch(removeService(id)),\n    onReset: () => dispatch(clearServiceFields()),\n    setError: (error) => dispatch(setError(error))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceListClassBased);\n","import React from 'react';\nimport './App.css';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\nimport ServiceAddClassBased from './components/ServiceAddClassBased';\nimport ServiceListClassBased from './components/ServiceListClassBased';\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceList />\n      <hr />\n      <ServiceAddClassBased />\n      <ServiceListClassBased />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import nanoid from 'nanoid';\nimport { ADD_SERVICE, REMOVE_SERVICE } from '../actions/actionTypes';\n\nconst initialState = [\n  {id: nanoid(), name: 'Замена стекла', price: 21000},\n  {id: nanoid(), name: 'Замена дисплея', price: 25000},\n];\n\nexport default function serviceListReducer(state = initialState, action) { \n  switch (action.type) {\n    case ADD_SERVICE:\n      const { id, name, price } = action.payload; \n      return id \n        ? state.map(item => item.id === id ? { id, name, price: Number(price) } : item) \n        : [...state, { id: nanoid(), name, price: Number(price) }];\n    case REMOVE_SERVICE: \n      return state.filter(service => service.id !== action.payload.id);\n    default:\n      return state;\n  }\n}\n","import { CHANGE_SERVICE_FIELD, CLEAR_SERVICE_FIELDS, EDIT_SERVICE, SET_ERROR } from '../actions/actionTypes';\n\nconst initialState = {\n  id: '',\n  name: '',\n  price: '',\n  error: '',\n  isEdit: false\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const { name, value } = action.payload;\n      return { ...state, [name]: value };\n    case CLEAR_SERVICE_FIELDS:\n      return initialState;\n    case EDIT_SERVICE:\n      return { ...action.payload, price: String(action.payload.price), error: '', isEdit: true };\n    case SET_ERROR:\n      const { error } = action.payload\n      return { ...state, error };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}